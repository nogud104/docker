version: '2.1'
services:
  django:
    build:
      context: .
      dockerfile: ./lib_catalog/Dockerfile
    image: python:3.7-alpine
    container_name: django
    env_file:
      - env.app
    # environment:
    #   - DB_NAME=${DB_NAME}
    #   - DB_USER=${DB_USER}
    #   - DB_PASS=${DB_PASSWORD}
    command: "python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      app-network:
        ipv4_address: "192.168.16.2"
      db-network:
        ipv4_address: "172.16.16.2"
  db:
    image: postgres:14.2-alpine
    container_name: database
    restart: always
    env_file:
      - env.database
    # environment:
    #   - POSTGRES_DATABASE=${DB_DATABASE}
    #   - POSTGRES_USER=${DB_USER}
    #   - POSTGRES_PASSWORD=${DB_PASSWORD}
    #   - POSTGRES_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - .dbdata:/var/lib/postgresql
    ports:
      - 5432:5432
    networks:
      db-network:
        ipv4_address: 172.16.16.3
  web:
    build:
      context: .
      target: production
      dockerfile: ./frontend/Dockerfile
    image: node:12-alpine
    container_name: nodejs
    ports:
      - "3000:3000"
    depends_on:
      - db
    networks:
      app-network:
        ipv4_address: "192.168.16.4"
      db-network:
        ipv4_address: "172.16.16.4"
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: "192.168.16.0/24"
          gateway: "192.168.16.1"
  db-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: "172.16.16.0/24"
          gateway: "172.16.16.1"
